---
import { readAll } from '../lib/markdoc/read';
import { blog } from '../lib/markdoc/frontmatter.schema';
import { project } from '../lib/markdoc/frontmatter.schema';
import { community } from '../lib/markdoc/frontmatter.schema';
import { goal } from '../lib/markdoc/frontmatter.schema';
import { bucketList } from '../lib/markdoc/frontmatter.schema';
import { team } from '../lib/markdoc/frontmatter.schema';
import PageMeta from '../components/PageMeta.astro';
import PageLayout from '../layouts/PageLayout.astro';
import Intro from '../components/Intro.astro';
import AboutTheTheme from '../components/AboutTheTheme.astro';
import { SITE_TITLE } from '../config';

const projects = await readAll({
  directory: 'projects',
  frontmatterSchema: project,
});

const sortedProjects = projects
  .filter((p) => p.frontmatter.draft !== true)
  .sort((a, b) => new Date(b.frontmatter.date).valueOf() - new Date(a.frontmatter.date).valueOf());

const communities = await readAll({
  directory: 'communities',
  frontmatterSchema: community,
});

const sortedCommunities = communities
  .filter((p) => p.frontmatter.draft !== true)
  .sort((a, b) => new Date(b.frontmatter.date).valueOf() - new Date(a.frontmatter.date).valueOf());

const goals = await readAll({
  directory: 'goals',
  frontmatterSchema: goal,
});

const sortedGoals = goals.filter((p) => p.frontmatter.draft !== true);

const bucketLists = await readAll({
  directory: 'bucketList',
  frontmatterSchema: bucketList,
});

const sortedBucketLists = bucketLists
  .filter((p) => p.frontmatter.draft !== true)
  .sort((a, b) => a.frontmatter.description.localeCompare(b.frontmatter.description));

const teams = await readAll({
  directory: 'team',
  frontmatterSchema: team,
});

const posts = await readAll({
  directory: 'blog',
  frontmatterSchema: blog,
});

const sortedPosts = posts
  .filter((p) => p.frontmatter.draft !== true)
  .sort((a, b) => new Date(b.frontmatter.date).valueOf() - new Date(a.frontmatter.date).valueOf());
---

<PageLayout>
  <PageMeta title={`Hello, I'm ${SITE_TITLE}`} slot='meta' />
  <Fragment slot='main'>
    <Intro />
    <section>
      <ul>
        {
          teams.map((team) => {
            const formattedDate = new Date(team.frontmatter.date).toLocaleDateString('en-us', {
              year: 'numeric',
              month: 'short',
              day: 'numeric',
            });
            return (
              <li class='grid grid-cols-[1fr] md:grid-cols-[1fr_auto] mb-3 md:gap-2 items-start'>
                <div class='title'>
                  <a href={team.frontmatter.url} target='_blank' class='unset hover:text-text-link'>
                    <span>{team.frontmatter.title}</span>
                    <span>
                      <i class='ml-1 mr-1 text-[12px] pb-2 fa-solid fa-up-right-from-square' />
                    </span>
                  </a>
                </div>
                <div class='text-text-muted italic'>
                  <time datetime={team.frontmatter.date.toISOString()}>{formattedDate}</time>
                </div>
              </li>
            );
          })
        }
      </ul>
    </section>
    <section class='mt-8'>
      <ul>
        {
          sortedCommunities.map((community) => {
            const formattedDate = new Date(community.frontmatter.date).toLocaleDateString('en-us', {
              year: 'numeric',
              month: 'short',
              day: 'numeric',
            });
            return (
              <li class='grid grid-cols-[1fr] md:grid-cols-[1fr_auto] mb-3 md:gap-2 items-start'>
                <div class='title'>
                  <a href={community.frontmatter.url} target='_blank' class='unset hover:text-text-link'>
                    <span>{community.frontmatter.title}</span>
                    <span>
                      <i class='ml-1 mr-1 text-[12px] pb-2 fa-solid fa-up-right-from-square' />
                    </span>
                  </a>
                </div>
                <div class='text-text-muted italic'>
                  <time datetime={community.frontmatter.date.toISOString()}>{formattedDate}</time>
                </div>
              </li>
            );
          })
        }
      </ul>
    </section>
    <section class='mt-8'>
      <ul>
        {
          sortedProjects.map((project) => {
            const formattedDate = new Date(project.frontmatter.date).toLocaleDateString('en-us', {
              year: 'numeric',
              month: 'short',
              day: 'numeric',
            });
            return (
              <li class='grid grid-cols-[1fr] md:grid-cols-[1fr_auto] mb-3 md:gap-2 items-start'>
                <div class='title'>
                  <a href={project.frontmatter.url} target='_blank' class='unset hover:text-text-link'>
                    <span>{project.frontmatter.title}</span>
                  </a>
                </div>
                <div class='text-text-muted italic'>
                  <time datetime={project.frontmatter.date.toISOString()}>{formattedDate}</time>
                </div>
              </li>
            );
          })
        }
      </ul>
    </section>
    <section class='mt-8'>
      <ul>
        {
          sortedGoals.map((goal) => {
            return (
              <li class='grid grid-cols-[1fr] md:grid-cols-[1fr_auto] mb-3 md:gap-2 items-start'>
                <div class='title'>
                  <span>{goal.frontmatter.title}</span>
                </div>
                <div class='text-text-muted italic'>
                  <span>{goal.frontmatter.description}</span>
                </div>
              </li>
            );
          })
        }
      </ul>
    </section>

    <section class='mt-8'>
      <ul>
        {
          sortedBucketLists.map((bucketList) => {
            return (
              <li class='grid grid-cols-[1fr] md:grid-cols-[1fr_auto] mb-3 md:gap-2 items-start'>
                <div class='title'>
                  <span>{bucketList.frontmatter.title}</span>
                </div>
                <div class='text-text-muted italic'>
                  <span>{bucketList.frontmatter.description}</span>
                </div>
              </li>
            );
          })
        }
      </ul>
    </section>
    <section class='mt-8'>
      <ul>
        {
          sortedPosts.map((post) => {
            const formattedDate = new Date(post.frontmatter.date).toLocaleDateString('en-us', {
              year: 'numeric',
              month: 'short',
              day: 'numeric',
            });
            return (
              <li class='grid grid-cols-[1fr] md:grid-cols-[1fr_auto] mb-3 md:gap-2 items-start'>
                <div class='title'>
                  {post.frontmatter.external ? (
                    <a href={post.frontmatter.url} target='_blank' class='unset hover:text-text-link'>
                      <span>{post.frontmatter.title}</span>
                      <span>
                        <i class='ml-1 mr-1 text-[12px] pb-2 fa-solid fa-up-right-from-square' />
                      </span>
                    </a>
                  ) : (
                    <a href={`/blog/${post.slug}`} class='unset hover:text-text-link'>
                      {post.frontmatter.title}
                    </a>
                  )}
                </div>
                <div class='text-text-muted italic'>
                  <time datetime={post.frontmatter.date.toISOString()}>{formattedDate}</time>
                </div>
              </li>
            );
          })
        }
      </ul>
    </section>
  </Fragment>
</PageLayout>
